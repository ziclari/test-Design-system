@use '../abstracts' as ab;
/// Añade un margen superior entre elementos hermanos dentro de un contenedor de flujo.
///
/// @example
/// <div class="flow">
///   <div>Elemento 1</div>
///   <div>Elemento 2</div>
///   <div>Elemento 3</div>
/// </div>
/// @group helpers
.flow > * + * {
    margin-top: var(--flow-space, 1rem);
}

/// Estilos para una lista horizontal.
///
/// @example
/// <ul class="horizontal-list">
///   <li>Elemento 1</li>
///   <li>Elemento 2</li>
/// </ul>
/// @group list-helpers
.horizontal-list {
    flex-wrap: wrap;
    @include ab.flex-center-horizontal;
    gap: ab.get-size('200');
    li {
        @include ab.flex-center-horizontal;
    }
}

/// Estilos para una lista vertical.
///
/// @example
/// <ul class="vertical-list">
///   <li>Elemento 1</li>
///   <li>Elemento 2</li>
/// </ul>
/// @group list-helpers
.vertical-list {
    flex-wrap: wrap;
    @include ab.flex-center-vertical;
    li {
        @include ab.flex-center-horizontal;
    }
}

/// Estilos para una lista con iconos de marca de verificación.
///
/// @example
/// <ul class="checkmark-list">
///   <li>Elemento 1</li>
///   <li>Elemento 2</li>
/// </ul>
/// @group list-helpers
.check-list {
    list-style: none;
    padding: 0;

    li {
        position: relative;
        padding-left: 32px;
        margin-bottom: 8px;

        &::before {
            content: "";
            @include ab.absolute(top 50% left 0);
            transform: translateY(-50%);
            @include ab.box(24px);
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%2340C4FF' stroke-width='3' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 6 9 17 4 12'/%3E%3C/svg%3E");
            background-size: contain;
            background-repeat: no-repeat;
        }
    }
}

/// Estilos para una lista numerada.
///
/// @example
/// <ul class="numered-list">
///   <li>Elemento 1</li>
///   <li>Elemento 2</li>
/// </ul>
/// @group list-helpers
.numered-list {
    list-style: none;
    counter-reset: list-counter;
    padding: 0;

    li {
        position: relative;
        padding-left: 40px;
        margin-bottom: 8px;
        font-size: 16px;

        &::before {
            content: counter(list-counter);
            counter-increment: list-counter;
            @include ab.absolute(top 50% left 0);
            transform: translateY(-50%);
            @include ab.box(24px);
            background-color: var(--color-primary);
            font-weight: bold;
            @include ab.flex-center;
            border-radius: 50%;
        }
    }
}
/// Estilos para una lista con iconos svg.
///
/// @example
/// <ul class="icon-list">
///   <li><svg class="icon"> Elemento 1</li>
///   <li><svg class="icon"> Elemento 2</li>
/// </ul>
/// @group list-helpers
.icon-list {
    list-style: none;
    padding: 0; 
    margin: 0;
    font-size:ab.get-size('400');
  &.li {
    display: flex;
    align-items: center;
    margin-bottom:ab.get-size('200');
  }
  
  .icon {
    width: 1.5rem;
    height: 1.5rem;
    margin-right:ab.get-size('300');
    fill: ab.get-color('dark-accent-blue'); 
  }
  
  &.li:hover {
    color: var(--primary-color);
  }
}
/// Centra el contenido vertical y horizontalmente dentro de un contenedor.
///
/// @example
/// <div class="vertical-align">
///   Contenido
/// </div>
/// @group helpers
.vertical-align {
    @include ab.flex-center;
}

/// Establece la dirección de flexión a columna.
///
/// @example
/// <div class="column">
///   <div>Elemento 1</div>
///   <div>Elemento 2</div>
/// </div>
/// @group helpers
.center-column {
    @include ab.flex-center-column;
}

/// Establece la dirección de flexión a fila.
///
/// @example
/// <div class="row">
///   <div>Elemento 1</div>
///   <div>Elemento 2</div>
/// </div>
/// @group helpers
.center-row {
    @include ab.flex-center-vertical;
}

/// Crea un contenedor adaptable con un ancho máximo.
///
/// @example
/// <div class="wrapper">
///   Contenido
/// </div>
/// @group helpers
.wrapper {
    max-width: 30rem;
    margin-left: auto;
    margin-right: auto;
    padding: 0 ab.get-size('500');

    @media (min-width: 40rem) {
        max-width: 40rem;
    }

    @media (min-width: 48rem) {
        max-width: 48rem;
    }

    @media (min-width: 64rem) {
        max-width: 64rem;
    }

    @media (min-width: 80rem) {
        max-width: 80rem;
    }

    @media (min-width: 96rem) {
        max-width: 96rem;
    }
}

/// Oculta el texto visualmente pero lo mantiene accesible para lectores de pantalla.
/// @group helpers
.hide-text {
    overflow: hidden;
    padding: 0;
    text-indent: 101%;
    white-space: nowrap;
}

/// Oculta el contenido visualmente y de los lectores de pantalla.
/// @group helpers
.visually-hidden {
    border: 0;
    clip-path: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

/// Grid layout
/// @group helpers
.grid {
    display: grid;
    gap: ab.get-size('200');
  
    &-auto-fit {
      grid-template-columns: repeat(auto-fit, minmax(var(--min-width, 120px), 1fr));
    }
  
    &-auto-fill {
      grid-template-columns: repeat(auto-fill, minmax(var(--min-width, 120px), 1fr));
    }
  
    @for $i from 1 through 12 {
      &-cols-#{$i} {
        grid-template-columns: repeat(#{$i}, 1fr);
      }
    }
  
    &-dense { grid-auto-flow: dense; }
  
    @each $breakpoint in ('sm', 'md', 'lg', 'xl') {
      @include ab.media-query(#{$breakpoint}) {
        @for $i from 1 through 12 {
          &-#{$breakpoint}-cols-#{$i} {
            grid-template-columns: repeat(#{$i}, 1fr);
          }
        }
      }
    }
  }
  
/// Flex layout
/// @group helpers
    .flex {
    display: flex;
    gap: ab.get-size('200');

    &-wrap { flex-wrap: wrap; }
    &-nowrap { flex-wrap: nowrap; }
    &-wrap-reverse { flex-wrap: wrap-reverse; }

    &-row { flex-direction: row; }
    &-row-reverse { flex-direction: row-reverse; }
    &-col { flex-direction: column; }
    &-col-reverse { flex-direction: column-reverse; }

    &-justify {
        &-start { justify-content: flex-start; }
        &-end { justify-content: flex-end; }
        &-center { justify-content: center; }
        &-between { justify-content: space-between; }
        &-around { justify-content: space-around; }
        &-evenly { justify-content: space-evenly; }
    }

    &-items {
        &-start { align-items: flex-start; }
        &-end { align-items: flex-end; }
        &-center { align-items: center; }
        &-baseline { align-items: baseline; }
        &-stretch { align-items: stretch; }
    }

    &-content {
        &-start { align-content: flex-start; }
        &-end { align-content: flex-end; }
        &-center { align-content: center; }
        &-between { align-content: space-between; }
        &-around { align-content: space-around; }
        &-stretch { align-content: stretch; }
    }

    @each $breakpoint in ('sm', 'md', 'lg', 'xl') {
        @include ab.media-query(#{$breakpoint}) {
        &-#{$breakpoint} {
            &-wrap { flex-wrap: wrap; }
            &-nowrap { flex-wrap: nowrap; }
            &-wrap-reverse { flex-wrap: wrap-reverse; }

            &-row { flex-direction: row; }
            &-row-reverse { flex-direction: row-reverse; }
            &-col { flex-direction: column; }
            &-col-reverse { flex-direction: column-reverse; }
        }
        }
    }
}

/// Spacing utilities
/// @group helpers
.gap {
@each $size in ('100', '200', '300', '400', '500') {
    &-#{$size} { gap: ab.get-size('#{$size}'); }
}
}

/// Responsive hide/show
/// @group helpers
@each $breakpoint in ('sm', 'md', 'lg', 'xl') {
@include ab.media-query(#{$breakpoint}) {
    .hide-#{$breakpoint} { display: none; }
    .show-#{$breakpoint} { display: block; }
}
}